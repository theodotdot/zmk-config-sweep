// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <175>;
    require-prior-idle-ms = <125>;
};

&mt {
    quick-tap-ms = <175>;
    flavor = "balanced";
    require-prior-idle-ms = <125>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            require-prior-idle-ms = <125>;
            layers = <0>;
            timeout-ms = <30>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <30>;
        };

        apostrophe {
            bindings = <&kp APOSTROPHE>;
            key-positions = <7 6>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <30>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <26 27>;
            require-prior-idle-ms = <200>;
            layers = <0>;
            timeout-ms = <30>;
        };

        sleep {
            bindings = <&kp K_SLEEP>;
            key-positions = <2 3>;
            require-prior-idle-ms = <500>;
            layers = <1>;
        };

        alt_tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <31 13>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "MAIN";
            bindings = <
&kp Q        &kp W           &kp E               &kp R                     &kp T        &kp Y                 &kp U           &kp I                &kp O            &kp P
&mt LSHFT A  &mt LEFT_GUI S  &mt LEFT_CONTROL D  &mt LEFT_ALT F            &kp G        &kp H                 &mt LEFT_ALT J  &mt RIGHT_CONTROL K  &mt RIGHT_GUI L  &kp SEMI
&kp Z        &kp X           &kp C               &kp V                     &kp B        &kp N                 &kp M           &kp COMMA            &kp DOT          &kp FSLH
                                                 &mt LEFT_SHIFT BACKSPACE  &lt 2 TAB    &mt RIGHT_ALT DELETE  &lt 1 SPACE
            >;
        };

        nav {
            bindings = <
&kp F1            &kp F2          &kp F3            &kp F4        &kp F5               &kp K_REDO       &kp K_PASTE  &kp K_COPY     &kp K_CUT     &kp K_UNDO
&kp LEFT_SHIFT    &kp LEFT_GUI    &kp LEFT_CONTROL  &kp LEFT_ALT  &kp C_VOLUME_UP      &kp CAPSLOCK     &kp LEFT     &kp DOWN       &kp UP_ARROW  &kp RIGHT
&kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT        &kp C_MUTE    &kp C_VOLUME_DOWN    &kp PRINTSCREEN  &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP   &kp END
                                                    &trans        &kp LS(TAB)          &trans           &trans
            >;

            label = "nav";
        };

        num_fun {
            bindings = <
&kp F6  &kp F7  &kp F8  &kp F9  &kp F10    &kp F11  &kp F12  &trans  &trans  &trans
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6   &kp N7   &kp N8  &kp N9  &kp N0
&trans  &trans  &trans  &trans  &trans     &trans   &trans   &trans  &trans  &trans
                        &trans  &trans     &trans   &trans
            >;
        };

        bt_layer {
            display-name = "BT";
            bindings = <
&bootloader  &none         &none         &none         &none           &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none           &none         &none         &none         &none         &sys_reset
                                         &none         &trans          &none         &trans
            >;
        };
    };
};
